@page "/fetchdata"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorTemplate.Shared
@inject HttpClient Http
@inject NavigationManager Navigation

<div>
    <h1>Weather forecast</h1>

    <p>This component demonstrates fetching random JSON data from the server.</p>
</div>

<AuthorizeView Roles="Administrators, Users">
    <Authorized>
        <div>
            @if (forecasts == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Temp. (C)</th>
                            <th>Temp. (F)</th>
                            <th>Summary</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var forecast in forecasts)
                        {
                            <tr>
                                <td>@forecast.Date.ToShortDateString()</td>
                                <td>@forecast.TemperatureC</td>
                                <td>@forecast.TemperatureF</td>
                                <td>@forecast.Summary</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="w-75 p-3">
            <p>You'll need to <a href="" @onclick="IdentityLogin" @onclick:preventDefault><b>login</b></a> as a <b>User</b> (<i>email: <b>user@example.com</b> password: <b>Qwerty1234#</b></i>) or an <b>Administrator</b> (<i>email: <b>admin@example.com</b> password: <b>Qwerty1234#</b></i>) to view this component.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private WeatherForecast[] forecasts;
    private string status = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            status = exception.HelpLink;
            //exception.Redirect();
        }
    }

    private void IdentityLogin()
    {
        Navigation.NavigateTo($"authentication/login?returnUrl=" + Uri.EscapeDataString(Navigation.Uri));
    }
}
